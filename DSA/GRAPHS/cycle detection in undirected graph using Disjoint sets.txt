#include<bits/stdc++.h>

using namespace std;

const int N = 1e5+6 ; 

vector<int> parent (N);
vector<int> sz(N);

void make_set(int v)
{
parent [v] = v ;
sz[v]  = 1;
}
int find_set(int v)
{
    if(v == parent[v])
        return v;
        
    return parent[v] = find_set(parent[v]);
}

void union_set(int a, int b)
{
    a = find_set(a);
    b = find_set(b);
    
    if(a!=b)
       { if(sz[a]<sz[b])
            swap(a,b);
            
            parent[b] = a;
            sz[a]+=sz[b];
       }    
}


int main()
{
int i;
for(i=0;i<N;i++)
{
    make_set(i);
}
int V,E,n,m;
cin>>V>>E;
vector<vector<int>> edges;
for(i=0;i<E;i++) {
    cin>>n>>m;
    edges.push_back({n,m});
}
bool cycle = false ; 
for(auto i : edges)
{
    int u = i[0];
    int v = i[1];
    int x = find_set(u);
    int y = find_set(v);
    if(x==y)
        cycle = true;
    else 
        union_set(u,v);
}
if(cycle)
cout<<"YES CYCLE PRESENT";
else
cout<<"THERE IS NO CYCLE";
return(0);
}